/*
 * This code was auto-generated by generator-mssql-types.
 * See https://github.com/jweyrich/generator-mssql-types for more information.
 * WARNING: If you change anything in this file it may be automatically overwriten!
 */

//import { Datasource, IProcedureResult, Procedure, SqlTypes } from '@internal/mssql-connector';
import { database } from '../../config/database';
import sql from 'mssql';

//export class SP_EDITARUSUARIO {
   // readonly _repository: Datasource;

    //constructor(repository: Datasource) {
    //    this._repository = repository;
    //}

 export const execute = async(params: Params): Promise<sql.IProcedureResult<Result>> => {
       
    // const procedure = new Procedure<Result>('SP_EDITARUSUARIO');
    var request = new sql.Request(database);
        if (params.IdUsuario != null) {
            request.input('IdUsuario', sql.Int(), params.IdUsuario);
            // procedure.addParameter('IdUsuario', params.IdUsuario, SqlTypes.Int());
        }
        if (params.Nombre != null) {
            request.input('Nombre', sql.NVarChar(50), params.Nombre);
            // procedure.addParameter('Nombre', params.Nombre, SqlTypes.NVarChar(50));
        }
        if (params.Apellido != null) {
            request.input('Apellido', sql.NVarChar(50), params.Apellido);
            // procedure.addParameter('Apellido', params.Apellido, SqlTypes.NVarChar(50));
        }
        if (params.Clave != null) {
            request.input('Clave', sql.NVarChar(50), params.Clave);
            // procedure.addParameter('Clave', params.Clave, SqlTypes.NVarChar(50));
        }
        if (params.Email != null) {
            request.input('Email', sql.NVarChar(100), params.Email);
            // procedure.addParameter('Email', params.Email, SqlTypes.NVarChar(100));
        }
        if (params.DNI != null) {
            request.input('DNI', sql.NVarChar(20), params.DNI);
            // procedure.addParameter('DNI', params.DNI, SqlTypes.NVarChar(20));
        }
        if (params.Direccion != null) {
            request.input('Direccion', sql.NVarChar(100), params.Direccion);
            // procedure.addParameter('Direccion', params.Direccion, SqlTypes.NVarChar(100));
        }
        if (params.FechaNacimiento != null) {
            request.input('FechaNacimiento', sql.DateTime(), params.FechaNacimiento);
            // procedure.addParameter('FechaNacimiento', params.FechaNacimiento, SqlTypes.DateTime());
        }
        if (params.Telefono != null) {
            request.input('Telefono', sql.NVarChar(20), params.Telefono);
            // procedure.addParameter('Telefono', params.Telefono, SqlTypes.NVarChar(20));
        }
        if (params.IdRol != null) {
            request.input('IdRol', sql.Int(), params.IdRol);
            // procedure.addParameter('IdRol', params.IdRol, SqlTypes.Int());
        }
        if (params.Estado != null) {
            request.input('Estado', sql.Bit(), params.Estado);
            // procedure.addParameter('Estado', params.Estado, SqlTypes.Bit());
        }
        if (params.Respuesta != null) {
            request.input('Respuesta', sql.Bit(), params.Respuesta);
            // procedure.addParameter('Respuesta', params.Respuesta, SqlTypes.Bit());
        }
        if (params.Mensaje != null) {
            request.input('Mensaje', sql.VarChar(500), params.Mensaje);
            // procedure.addParameter('Mensaje', params.Mensaje, SqlTypes.VarChar(500));
        }
    //request.output('output_parameter', sql.VarChar(50));
    const recordsets = await request.execute<Result>('SP_EDITARUSUARIO');
    console.log("RecordSet SP_EDITARUSUARIO",recordsets)
    return recordsets
    //return await this._repository.execProcedure(procedure);

    }
//}

/*
 * All attributes below are optional because MSSQL does not give us the correct information.
 * We'd need to write a custom T-SQL parser to get this piece of information.
 */
export type Params = {
    IdUsuario?: number; /* int */
    Nombre?: string; /* nvarchar(50) */
    Apellido?: string; /* nvarchar(50) */
    Clave?: string; /* nvarchar(50) */
    Email?: string; /* nvarchar(100) */
    DNI?: string; /* nvarchar(20) */
    Direccion?: string; /* nvarchar(100) */
    FechaNacimiento?: Date; /* datetime */
    Telefono?: string; /* nvarchar(20) */
    IdRol?: number; /* int */
    Estado?: boolean; /* bit */
    Respuesta?: boolean; /* bit */
    Mensaje?: string; /* varchar(500) */
};

export type Result = void;
